### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Login {
  token: String!
  user: User!
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  loginUser(phoneNumber: String): Login!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  ListUsers: [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  email: String!
  firebaseToken: String
  id: Int!
  name: String!
  phoneNumber: String!
}

input UserCreateInput {
  email: String!
  firebaseToken: String
  name: String!
  phoneNumber: String!
}

input UserUpdateInput {
  email: String
  firebaseToken: String
  id: Int
  name: String
  phoneNumber: String
}

input UserUpdateManyMutationInput {
  email: String
  firebaseToken: String
  id: Int
  name: String
  phoneNumber: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: StringFilter
  firebaseToken: NullableStringFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  phoneNumber: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  phoneNumber: String
}
